# 哈希 hash
# hash ：概括摘要加密算法。一般的加密，比如a-z对应的数字1-26，abc的密文为123，abcde的密文为12345。而hash是"摘要"算法，不管1kb的txt文件还是几个G的视频，最终都会生成一个固定长度的字符串。

# 优点：文件轻度修改最终摘要就大幅变化，如果被修改会快速发现。正向生成摘要容易，从摘要反推难。
# 常用加密算法：md5 sha128 sha256
"""
场景
1. 效验文件，保证文件被第三方修改。确保下载文件没加入广告或恶意程序。
2. 效验接口参数。api平台app_key和params生成sign签名，如果传输过程中有误或被中间人截取请求修改，那么签名会不匹配，服务器检测到丢弃。
3. 字典，hash表，散列表。hash值作为键名供快速访问。
4. 密码加密。用户注册成功后把密码hash处理然后把摘要字符串存入数据库，用户登录时将用户提交的密码hash 然后跟数据库中的字符串对比，这样的好处是数据库被黑客登陆后仍然无法获取用户密码。
"""

import hashlib

md5 = hashlib.md5()
md5.update('一些文本，待加密的文件夹'.encode('utf-8'))
md5.update('追加新的内容生成更新后的摘要'.encode())
print(md5.hexdigest())

"""
update()  比较大的文件如视频可以分成多块，多次调用update()。
参数为二进制，带摘要信息是字符串的话先编码。
hex digest 生成十六进制摘要字符串
"""


"""
攻击
"""
salt = 'abc'
md5 = hashlib.md5()
md5.update(('一些文本，待加密的文件夹'+salt).encode('utf-8'))
print('md5'+'$'+salt+'$'+md5.hexdigest())
# md5$abc$69ca875fe7b4c2c89f7c940b23803f95
"""
加盐后，黑客想要穷举攻击，需要每个弱密码加盐再生成字符串，10万个弱密码，加盐前只需要一张10W行数据的表"""
